#!/usr/bin/env node

var cluster = require('cluster');

var express = require('express')
    , app = require('../app')
    , server = require('http').createServer(app);


var Socket = require('../newsocket');


var loadAccounts = require('../modules/loadAccounts');

//io.adapter(redis({host: 'localhost', port: 6379}));

var workers = process.env.WORKERS || require('os').cpus().length;

if (cluster.isMaster) {
    console.log('start cluster with %s workers', workers - 1);

    var users = [];

    workers--;
    for (var i = 0; i < workers; ++i) {
        var worker = cluster.fork();
        //console.log('worker %s started.', worker.process.pid);
        worker.on('message', function (message) {
           // console.log(arguments);

            switch (message.command){
                case 'addUser':
                    users.push(message.data);
                    break;
                case 'getAllUsers':
                    console.log('hhh')
                    worker.send({
                        users: users,
                        data: message.data
                    });
                    break;
            }

        })
    }

    cluster.on('death', function (worker) {
        console.log('worker %s died. restart...', worker.process.pid);
        cluster.fork();
    });

} else {
    server.listen(process.env.PORT || 5000);

    new Socket(server);





}

/*
 var port = normalizePort(process.env.PORT || '5000');
 app.set('port', port);

 var server = http.createServer(app);

 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);





 function normalizePort(val) {
 var port = parseInt(val, 10);

 if (isNaN(port)) {
 // named pipe
 return val;
 }

 if (port >= 0) {
 // port number
 return port;
 }

 return false;
 }


 function onError(error) {
 if (error.syscall !== 'listen') {
 throw error;
 }

 var bind = typeof port === 'string'
 ? 'Pipe ' + port
 : 'Port ' + port;

 // handle specific listen errors with friendly messages
 switch (error.code) {
 case 'EACCES':
 console.error(bind + ' requires elevated privileges');
 process.exit(1);
 break;
 case 'EADDRINUSE':
 console.error(bind + ' is already in use');
 process.exit(1);
 break;
 default:
 throw error;
 }
 }



 function onListening() {
 var addr = server.address();
 var bind = typeof addr === 'string'
 ? 'pipe ' + addr
 : 'port ' + addr.port;
 debug('Listening on ' + bind);
 }
 */


