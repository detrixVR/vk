#!/usr/bin/env node

var cluster = require('cluster');
var extend = require('extend');
var Process = require('../newsocket/process');
var express = require('express')
    , app = require('../app')
    , server = require('http').createServer(app);

var Socket = require('../newsocket');


var workers = /*process.env.WORKERS*/7 || require('os').cpus().length; //WEB_CONCURRENCY

var workersArray = [];
var users = [];
var processes = [];

if (cluster.isMaster) {

    console.log('start cluster with %s workers', workers - 1);

    var broadcast = function (data) {
        for (var i in workersArray) {
            var worker = workersArray[i];
            worker.send(data);
        }
    };

    function getExistingProcess(data) {
        var process = null;

        for (var k = 0; k < processes.length; k++) {
            if (processes[k].username === data.username &&
                processes[k].processId === data.processId &&
                processes[k].accountId === data.accountId) {
                process = processes[k];
                break;
            }
        }

        return process;
    }


    workers--;

    for (var i = 0; i < workers; ++i) {

        var worker = cluster.fork();

        worker.on('message', function (msg) {

            switch (msg.command) {
                case 'startPauseProcess':
                    var process = getExistingProcess(msg.data);
                    if (process) {
                        if (process.getState() === 2) {
                            process.start();
                        } else {
                            process.pause();
                        }
                        broadcast({
                            command: 'setProcessState',
                            data: extend(msg.data, {state: process.getState()})
                        });
                    } else {
                        process = new Process(msg.data);
                        processes.push(process);
                        process.start();
                        worker.send({
                            command: 'startProcess',
                            data: extend(msg.data, {state: process.getState()})
                        });
                    }
                    break;
                case 'pauseProcess':
                    var process = getExistingProcess(msg.data);
                    if (process) {
                        process.pause();
                        broadcast({
                            command: 'setProcessState',
                            data: extend(msg.data, {state: process.getState()})
                        });
                    }
                    break;
                case 'getCurrentProcess':
                    worker.send({
                        command: 'setProcess',
                        data: extend(msg.data, {process: getExistingProcess(msg.data)})
                    })
                    break;
            }


        })

    }


    workersArray.push(worker);


    cluster.on('death', function (worker) {
        console.log('worker %s died. restart...', worker.process.pid);
        cluster.fork();
    });

} else {

    var port = normalizePort(process.env.PORT || '5000');

    app.set('port', port);


    server.listen(port);

    server.on('error', onError);
    server.on('listening', onListening);

    new Socket(server);

    app.use(function (req, res, next) {
        var err = {
            message: 'Страница не найдена'
        };
        err.status = 404;
        next(err);
    });


    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        console.log('Listening on ' + bind);
    }

    function normalizePort(val) {
        var port = parseInt(val, 10);

        if (isNaN(port)) {
            return val;
        }

        if (port >= 0) {
            return port;
        }

        return false;
    }
}



