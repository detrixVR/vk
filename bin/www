#!/usr/bin/env node

var cluster = require('cluster'),
    extend = require('extend'),
    express = require('express'),
    app = require('../app'),
    server = require('http').createServer(app),
    Socket = require('../newsocket'),
    util = require('util');

var workers = /*process.env.WORKERS*/3 || require('os').cpus().length; //WEB_CONCURRENCY

var workersArray = [];
var processes = [];
var tasks = [];
var memoryUsage = {};

if (cluster.isMaster) {

    console.log('Start cluster with %s workers', workers - 1);

    var broadcast = function (data) {
        for (var i in workersArray) {
            var worker = workersArray[i];
            worker.send(data);
        }
    };

    function getExistingProcess(data) {
        var process = null;

        for (var k = 0; k < processes.length; k++) {
            if (processes[k].username === data.username &&
                processes[k].processId === data.processId &&
                processes[k].accountId === data.accountId) {
                process = processes[k];
                break;
            }
        }

        return process;
    }

    function getExistingTask(data) {
        var task = null;

        for (var k = 0; k < tasks.length; k++) {
            if (tasks[k].uid === data.uid) {
                task = tasks[k];
                break;
            }
        }

        return task;
    }

    workers--;

    for (var i = 0; i < workers; ++i) {

        var worker = cluster.fork();

        worker.on('message', function (msg) {

            var process = null;
            var task = null;

            switch (msg.command) {
                case 'startPauseProcess':
                    process = getExistingProcess(msg.data);
                    if (process) {
                        if (process.state !== 0) {
                            cluster.workers[process.wid].send({
                                command: msg.command,
                                data: msg.data
                            });
                        } else {
                            console.error('error 1');
                        }
                    } else {
                        process = {
                            wid: worker.id,
                            username: msg.data.username,
                            accountId: msg.data.accountId,
                            processId: msg.data.processId,
                            state: 0
                        };
                        processes.push(process);
                        console.log(processes);
                        cluster.workers[process.wid].send({
                            command: 'startProcess',
                            data: msg.data
                        });
                    }
                    break;
                case 'startProcess':
                    process = getExistingProcess(msg.data);
                    if (process) {
                        process.state = 1;
                    } else {
                        console.error('error 2');
                    }
                    break;
                case 'stopProcess':
                case 'getCurrentProcess':
                    process = getExistingProcess(msg.data);
                    if (process) {
                        cluster.workers[process.wid].send({
                            command: msg.command,
                            data: msg.data
                        });
                    } else {
                        worker.send({
                            command: msg.command,
                            data: msg.data
                        })
                    }
                    break;
                case 'justStopProcess':
                    process = getExistingProcess(msg.data);
                    if (process) {
                        processes.splice(processes.indexOf(process), 1);
                    }
                    break;
                case 'getAllProcesses':
                    broadcast({
                        command: 'getAllProcesses',
                        data: msg.data
                    });
                    break;
                case 'getAllTasks':
                    broadcast({
                        command: 'getAllTasks',
                        data: msg.data
                    });
                    break;
                case 'setMemoryUsage':
                    //  console.log('', msg.data.processPid, ': ' + msg.data.memoryUsage.heapTotal / 1024 / 1024, 'mb');
                    memoryUsage[msg.data.processPid] = msg.data.memoryUsage.heapTotal;
                    break;
                case 'createTask':

                    task = {
                        wid: this.id,
                        username: msg.data.username,
                        accountId: msg.data.accountId,
                        uid: msg.data.uid
                    };

                    tasks.push(task);

                    console.log(tasks);
                    console.log('tasks length: ', tasks.length);

                    cluster.workers[task.wid].send({
                        command: msg.command,
                        data: msg.data
                    });
                    break;
                case 'startPauseTask':
                case 'stopTask':

                    console.log(msg.data);
                    task = getExistingTask(msg.data);
                    if (task) {
                        console.log('here3')
                        cluster.workers[task.wid].send({
                            command: msg.command,
                            data: msg.data
                        });
                    }
                    break;
            }
        });
        workersArray.push(worker);
    }

    cluster.on('death', function (worker) {
        console.log('worker %s died. restart...', worker.process.pid);
        cluster.fork();
    });

    /*setInterval(function () {
     for (var i = 0; i < workersArray.length; i++) {
     workersArray[i].send({
     command: 'memoryUsage'
     });
     }
     }, 2000);

     function getRandomInt(min, max) {
     return Math.floor(Math.random() * (max - min + 1)) + min;
     }

     setInterval(function () {
     workersArray[getRandomInt(0, workers - 1)].send({
     command: 'sendMemoryUsage',
     data: memoryUsage
     })
     }, 3333);*/


} else {

    var port = normalizePort(process.env.PORT || '5000');

    app.set('port', port);

    server.listen(port);

    server.on('error', onError);
    server.on('listening', onListening);

    app.set('hovan', new Socket(server));

    //  ;

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        console.log('Listening on ' + bind);
    }

    function normalizePort(val) {
        var port = parseInt(val, 10);

        if (isNaN(port)) {
            return val;
        }

        if (port >= 0) {
            return port;
        }

        return false;
    }
}



