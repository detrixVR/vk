#!/usr/bin/env node

var cluster = require('cluster');
var extend = require('extend');
var Process = require('../newsocket/process');
var express = require('express')
    , app = require('../app')
    , server = require('http').createServer(app);

var Socket = require('../newsocket');
var dbProcess = require('../models/process').Process;

var util = require('util');


var workers = /*process.env.WORKERS*/3 || require('os').cpus().length; //WEB_CONCURRENCY

var workersArray = [];
var processes = [];
var memoryUsage = {};

if (cluster.isMaster) {

    console.log('start cluster with %s workers', workers - 1);

    var broadcast = function (data) {
        for (var i in workersArray) {
            var worker = workersArray[i];
            worker.send(data);
        }
    };

    function getExistingProcess(data) {
        var process = null;

        for (var k = 0; k < processes.length; k++) {
            if (processes[k].username === data.username &&
                processes[k].processId === data.processId &&
                processes[k].accountId === data.accountId) {
                process = processes[k];
                break;
            }
        }

        return process;
    }

    function getAllProcesses(data) {
        var result = [];

        for (var k = 0; k < processes.length; k++) {
            if (processes[k].username === data.username) {
                result.push(processes[k]);
                break;
            }
        }

        return result;
    }

    workers--;

    for (var i = 0; i < workers; ++i) {

        var worker = cluster.fork();

        worker.on('message', function (msg) {

            switch (msg.command) {
                case 'startPauseProcess':
                    var process = getExistingProcess(msg.data);
                    if (process) {
                        if (process.getState() === 2) {
                            process.start();
                        } else {
                            process.pause();
                        }
                        broadcast({
                            command: 'setProcessState',
                            data: extend(msg.data, {state: process.getState()})
                        });
                    } else {
                        process = new Process(msg.data);
                        processes.push(process);
                        process.start();
                        console.log(process);
                        worker.send({
                            command: 'startProcess',
                            data: extend(msg.data, {state: process.getState()})
                        });
                    }
                    break;
                case 'stopProcess':
                    var process = getExistingProcess(msg.data);
                    if (process) {
                        process.stop();
                        var newProcess = dbProcess({
                            username: process.username,
                            accountId: process.accountId,
                            processId: process.processId,
                            messages: process.messages || [],
                            settings: process.settings,
                            state: process.getState()
                        });
                        newProcess.save(function (err, proc) {
                            if (err) {
                                console.error(err);
                            } else {
                                processes.splice(processes.indexOf(process, 1));
                                console.log(processes);
                                broadcast({
                                    command: 'stopProcess',
                                    data: proc
                                });
                            }
                        })
                    }
                    break;
                case 'getCurrentProcess':
                    worker.send({
                        command: 'setProcess',
                        data: extend(msg.data, {process: getExistingProcess(msg.data)})
                    });
                    break;
                case 'getAllProcesses':
                    worker.send({
                        command: 'setProcesses',
                        data: extend(msg.data, {processes: getAllProcesses(msg.data)})
                    });
                    break;
                case 'setProcessMessage':
                    var process = getExistingProcess(msg.data);
                    if (process) {
                        process.messages.push(msg.data.msg);
                    }
                    break;
                case 'setMemoryUsage':
                    //  console.log('', msg.data.processPid, ': ' + msg.data.memoryUsage.heapTotal / 1024 / 1024, 'mb');
                    memoryUsage[msg.data.processPid] = msg.data.memoryUsage.heapTotal;
                   // console.log(memoryUsage);
                    break;
            }
        });

        workersArray.push(worker);

    }


    cluster.on('death', function (worker) {
        console.log('worker %s died. restart...', worker.process.pid);
        cluster.fork();
    });

    setInterval(function () {
        for (var i = 0; i < workersArray.length; i++) {
            workersArray[i].send({
                command: 'memoryUsage'
            });
        }
    }, 2000);

    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    setInterval(function () {
        workersArray[getRandomInt(0, workers-1)].send({
            command: 'sendMemoryUsage',
            data: memoryUsage
        })
    }, 3333);


} else {

    var port = normalizePort(process.env.PORT || '5000');

    app.set('port', port);


    server.listen(port);

    server.on('error', onError);
    server.on('listening', onListening);

    new Socket(server);


    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        console.log('Listening on ' + bind);
    }

    function normalizePort(val) {
        var port = parseInt(val, 10);

        if (isNaN(port)) {
            return val;
        }

        if (port >= 0) {
            return port;
        }

        return false;
    }
}



